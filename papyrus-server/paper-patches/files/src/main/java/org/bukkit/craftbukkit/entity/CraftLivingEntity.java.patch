--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -2,13 +_,16 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Sets;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
+
+import java.util.*;
+
+import de.erethon.papyrus.CraftPDamageType;
+import de.erethon.papyrus.PDamageType;
+import de.erethon.spellbook.api.SpellData;
+import de.erethon.spellbook.api.SpellEffect;
+import de.erethon.spellbook.api.SpellTrait;
+import de.erethon.spellbook.api.SpellbookSpell;
+import io.papermc.paper.world.damagesource.PaperCombatTrackerWrapper;
 import net.minecraft.Optionull;
 import io.papermc.paper.world.damagesource.CombatTracker;
 import net.minecraft.core.component.DataComponents;
@@ -18,6 +_,7 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.damagesource.DamageSources;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.entity.EntitySpawnReason;
 import net.minecraft.world.entity.EntityType;
@@ -53,6 +_,7 @@
 import org.bukkit.craftbukkit.inventory.CraftEntityEquipment;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.potion.CraftPotionEffectType;
+import org.bukkit.damage.DamageType;
 import org.bukkit.entity.AbstractArrow;
 import org.bukkit.entity.AbstractWindCharge;
 import org.bukkit.entity.Arrow;
@@ -95,8 +_,36 @@
 
 public class CraftLivingEntity extends CraftEntity implements LivingEntity {
 
+    private PaperCombatTrackerWrapper combatTracker;
     private CraftEntityEquipment equipment;
 
+    // Papyrus start
+    private Set<SpellData> unlockedSpellData = new HashSet<>();
+    private Set<SpellData> passiveSpells = new HashSet<>();
+    private Set<SpellbookSpell> activeSpells = new HashSet<>();
+    private Set<SpellTrait> activeTraits = new HashSet<>();
+    private final SpellData[] assignedSlots = new SpellData[8];
+    private final Set<String> tags = new HashSet<>();
+
+    Map<SpellData, Long> usedSpells = new LinkedHashMap<>();
+    Set<SpellEffect> effects = new HashSet<>();
+    Set<SpellbookSpell> runningPassiveSpells = new HashSet<>();
+    private int maxEnergy = 0;
+    private int energy = 0;
+    private boolean channeling = false;
+    // Papyrus end
+
+    // Papyrus start - Aether constructor
+    public CraftLivingEntity(CraftServer server) {
+        super(server);
+        if (entity instanceof Mob || entity instanceof ArmorStand) {
+            this.equipment = new CraftEntityEquipment(this);
+            net.minecraft.world.entity.LivingEntity living = (net.minecraft.world.entity.LivingEntity) entity;
+            this.combatTracker = new PaperCombatTrackerWrapper(living.getCombatTracker());
+        }
+    }
+    // Papyrus end
+
     public CraftLivingEntity(final CraftServer server, final net.minecraft.world.entity.LivingEntity entity) {
         super(server, entity);
 
@@ -1127,6 +_,121 @@
     public boolean canUseEquipmentSlot(org.bukkit.inventory.EquipmentSlot slot) {
         return this.getHandle().canUseSlot(org.bukkit.craftbukkit.CraftEquipmentSlot.getNMS(slot));
     }
+
+    // Papyrus start - Spellbook
+    @Override
+    public void sendParsedActionBar(String text) {
+        if (this instanceof Player player) {
+                player.sendActionBar(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize(text));
+            }
+    }
+
+    @Override
+    public void sendParsedMessage(String text) {
+        if (this instanceof Player player) {
+                player.sendMessage(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize(text));
+            }
+    }
+
+    @Override
+    public Map<SpellData, Long> getUsedSpells() {
+        return usedSpells;
+    }
+
+    @Override
+    public Set<SpellEffect> getEffects() {
+        return effects;
+    }
+
+    @Override
+    public Set<SpellbookSpell> getPassiveSpells() {
+        return runningPassiveSpells;
+    }
+
+    @Override
+    public Set<SpellbookSpell> getActiveSpells() {
+        return activeSpells;
+    }
+
+    @Override
+    public Set<SpellData> getUnlockedSpells() {
+        return unlockedSpellData;
+    }
+
+    @Override
+    public Set<SpellData> getUnlockedPassives() {
+        return passiveSpells;
+    }
+
+    @Override
+    public Set<SpellTrait> getActiveTraits() {
+        return activeTraits;
+    }
+
+    @Override
+    public Set<String> getTags() {
+        return tags;
+    }
+
+    @Override
+    public int getEnergy() {
+        return energy;
+    }
+
+    @Override
+    public int setEnergy(int e) {
+        return energy = Math.min(e, maxEnergy);
+    }
+
+    @Override
+    public int getMaxEnergy() {
+        return maxEnergy;
+    }
+
+    @Override
+    public int setMaxEnergy(int e) {
+        return maxEnergy = e;
+    }
+
+    @Override
+    public int addEnergy(int e) {
+        energy = Math.min(energy + e, maxEnergy);
+        return energy;
+    }
+
+    @Override
+    public int removeEnergy(int e) {
+        energy = Math.max(energy - e, 0);
+        return energy;
+    }
+
+    @Override
+    public boolean isChanneling() {
+        return channeling;
+    }
+
+    @Override
+    public void setChanneling(boolean channeling) {
+        this.channeling = channeling;
+    }
+
+    @Override
+    public void damage(double amount, PDamageType type) {
+        getHandle().hurtServer((ServerLevel) getHandle().level(), getHandle().damageSources().generic(), (float) amount, CraftPDamageType.ofAPI(type));
+    }
+
+            @Override
+    public void damage(double amount, Entity source, PDamageType type) {
+        DamageSource reason = this.getHandle().damageSources().generic();
+        if (source instanceof HumanEntity) {
+            reason = this.getHandle().damageSources().playerAttack(((CraftHumanEntity) source).getHandle());
+        } else if (source instanceof LivingEntity) {
+            reason = this.getHandle().damageSources().mobAttack(((CraftLivingEntity) source).getHandle());
+        }
+        getHandle().hurtServer((ServerLevel) getHandle().level(), reason, (float) amount, CraftPDamageType.ofAPI(type));
+    }
+    // Papyrus end
+
 
     @Override
     public CombatTracker getCombatTracker() {
