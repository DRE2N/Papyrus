--- a/net/minecraft/world/level/block/ChorusPlantBlock.java
+++ b/net/minecraft/world/level/block/ChorusPlantBlock.java
@@ -38,11 +_,13 @@
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext context) {
+        if (true) return this.defaultBlockState(); // Papyrus - Always return default state
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates) return this.defaultBlockState(); // Paper - add option to disable block updates
         return getStateWithConnections(context.getLevel(), context.getClickedPos(), this.defaultBlockState());
     }
 
     public static BlockState getStateWithConnections(BlockGetter level, BlockPos pos, BlockState state) {
+        if (true) return state; // Papyrus - Always return state
         BlockState blockState = level.getBlockState(pos.below());
         BlockState blockState1 = level.getBlockState(pos.above());
         BlockState blockState2 = level.getBlockState(pos.north());
@@ -69,7 +_,7 @@
         BlockState neighborState,
         RandomSource random
     ) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates) return state; // Paper - add option to disable block updates
+        if (true) return state; // Papyrus - Always return state
         if (!state.canSurvive(level, pos)) {
             scheduledTickAccess.scheduleTick(pos, this, 1);
             return super.updateShape(state, level, scheduledTickAccess, pos, direction, neighborPos, neighborState, random);
@@ -83,7 +_,7 @@
 
     @Override
     protected void tick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates) return; // Paper - add option to disable block updates
+        if (true) return; // Papyrus - Always return
         if (!state.canSurvive(level, pos)) {
             level.destroyBlock(pos, true);
         }
@@ -91,7 +_,7 @@
 
     @Override
     protected boolean canSurvive(BlockState state, LevelReader level, BlockPos pos) {
-        if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableChorusPlantUpdates) return true; // Paper - add option to disable block updates
+        if (true) return true; // Papyrus - Always return true
         BlockState blockState = level.getBlockState(pos.below());
         boolean flag = !level.getBlockState(pos.above()).isAir() && !blockState.isAir();
 
@@ -120,6 +_,6 @@
 
     @Override
     protected boolean isPathfindable(BlockState state, PathComputationType pathComputationType) {
-        return false;
+        return true; // Papyrus - Allow pathfinding on chorus plants
     }
 }
