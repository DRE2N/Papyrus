--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -33,6 +_,7 @@
 import net.minecraft.core.component.DataComponents;
 import net.minecraft.core.component.PatchedDataComponentMap;
 import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.core.registries.Registries;
 import net.minecraft.network.RegistryFriendlyByteBuf;
 import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
@@ -92,6 +_,7 @@
 import net.minecraft.world.level.block.state.pattern.BlockInWorld;
 import org.apache.commons.lang3.function.TriConsumer;
 import org.apache.commons.lang3.mutable.MutableBoolean;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.slf4j.Logger;
 
 public final class ItemStack implements DataComponentHolder {
@@ -131,6 +_,9 @@
     public static final StreamCodec<RegistryFriendlyByteBuf, ItemStack> OPTIONAL_UNTRUSTED_STREAM_CODEC = createOptionalStreamCodec(
         DataComponentPatch.DELIMITED_STREAM_CODEC
     );
+    // Papyrus start - Item translations. Just a copy of the above but without disabling the translator
+    public static final StreamCodec<RegistryFriendlyByteBuf, ItemStack> OPTIONAL_TRANSLATED_STREAM_CODEC = createOptionalAlwaysTranslatedStreamCodec(DataComponentPatch.STREAM_CODEC);
+    // Papyrus end
     public static final StreamCodec<RegistryFriendlyByteBuf, ItemStack> STREAM_CODEC = new StreamCodec<RegistryFriendlyByteBuf, ItemStack>() {
         @Override
         public ItemStack decode(RegistryFriendlyByteBuf buffer) {
@@ -154,6 +_,9 @@
     public static final StreamCodec<RegistryFriendlyByteBuf, List<ItemStack>> OPTIONAL_LIST_STREAM_CODEC = OPTIONAL_STREAM_CODEC.apply(
         ByteBufCodecs.collection(NonNullList::createWithCapacity)
     );
+    // Papyrus start - Item translations
+    public static final StreamCodec<RegistryFriendlyByteBuf, List<ItemStack>> OPTIONAL_TRANSLATED_LIST_STREAM_CODEC = ItemStack.OPTIONAL_TRANSLATED_STREAM_CODEC.apply(ByteBufCodecs.collection(NonNullList::createWithCapacity));
+    // Papyrus end
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final ItemStack EMPTY = new ItemStack((Void)null);
     private static final Component DISABLED_ITEM_TOOLTIP = Component.translatable("item.disabled").withStyle(ChatFormatting.RED);
@@ -213,6 +_,41 @@
             }
         };
     }
+
+    // Papyrus start - Item translations
+    private static StreamCodec<RegistryFriendlyByteBuf, ItemStack> createOptionalAlwaysTranslatedStreamCodec(
+            final StreamCodec<RegistryFriendlyByteBuf, DataComponentPatch> codec
+    ) {
+        return new StreamCodec<RegistryFriendlyByteBuf, ItemStack>() {
+            @Override
+            public ItemStack decode(RegistryFriendlyByteBuf buffer) {
+                int varInt = buffer.readVarInt();
+                if (varInt <= 0) {
+                    return ItemStack.EMPTY;
+                } else {
+                    Holder<Item> holder = Item.STREAM_CODEC.decode(buffer);
+                    DataComponentPatch dataComponentPatch = codec.decode(buffer);
+                    return new ItemStack(holder, varInt, dataComponentPatch);
+                }
+            }
+
+            @Override
+            public void encode(RegistryFriendlyByteBuf buffer, ItemStack value) {
+                if (value.isEmpty() || value.getItem() == null) { // CraftBukkit - NPE fix itemstack.getItem()
+                    buffer.writeVarInt(0);
+                } else {
+                    buffer.writeVarInt(io.papermc.paper.util.sanitizer.ItemComponentSanitizer.sanitizeCount(io.papermc.paper.util.sanitizer.ItemObfuscationSession.currentSession(), value, value.getCount())); // Paper - potentially sanitize count
+                    Item.STREAM_CODEC.encode(buffer, value.getItemHolder());
+                    // Paper start - adventure; conditionally render translatable components
+                    try (final io.papermc.paper.util.SafeAutoClosable ignored = io.papermc.paper.util.sanitizer.ItemObfuscationSession.withContext(c -> c.itemStack(value))) { // pass the itemstack as context to the obfuscation session
+                        codec.encode(buffer, value.components.asPatch());
+                    }
+                    // Paper end - adventure; conditionally render translatable components
+                }
+            }
+        };
+    }
+    // Papyrus end
 
     public static StreamCodec<RegistryFriendlyByteBuf, ItemStack> validatedStreamCodec(final StreamCodec<RegistryFriendlyByteBuf, ItemStack> codec) {
         return new StreamCodec<RegistryFriendlyByteBuf, ItemStack>() {
